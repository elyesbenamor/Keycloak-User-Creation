---
# Generates password of given length and characterset. Guarantees that every charset is used at least once
# vars:
#   password_length

- name: Init charsets
  ansible.builtin.set_fact:
    charsets:
      - ascii_lowercase
      - ascii_uppercase
      - digits
      - "!#$%&()*+,-./:;<=>?@[]^_`{|}~"

- name: Failure in password length
  ansible.builtin.fail:
    msg: "password_length must be at least {{ charsets | length }}, is {{ password_length }}. {{ charsets | length }} charset(s) are specified and this task guarantees that every set is used at least once"
  when: gec_ocsre.keycloak.password_length <  (charsets | length)

- name: Init password array
  ansible.builtin.set_fact:
    password_characters: []

- name: Pick characters for password
  ansible.builtin.set_fact:
    password_characters: "{{ password_characters + [lookup('password', '/dev/null length=1 chars=' ~ item.0)] }}"
  with_nested:
    - "{{ charsets }}"
    - "{{ range(0, (gec_ocsre.keycloak.password_length / charsets | length) | int) | list }}"
  no_log: true

- name: Generate password
  ansible.builtin.set_fact:
    generated_password: "{{ password_characters | shuffle | join('') }}"

- name: Set credentials_password
  ansible.builtin.set_fact:
    credentials_password:
      type: password
      value: "{{ generated_password }}"
      temporary: false
  
- name: Set password for user {{ users.name }} in {{ gec_ocsre.keycloak.realm }} realm
  ansible.builtin.include_role:
    name: keycloak-api-put
  vars:
    url_path: "{{ user_location }}"
    body:
      credentials: "[ {{ credentials_password }} ]"
      requiredActions: []
    status_code: 204
  tags: print_action
